AddLocationForm class

Python

CLASS AddLocationForm {

	// gets the respective object properties from the kv code and sets them as variables
	search_input = ObjectProperty()
    search_results = ObjectProperty()
    recent_search_one = ObjectProperty()
    recent_search_two = ObjectProperty()
    recent_search_three = ObjectProperty()
	usr_details = StringProperty('')
	
	// creates a procedure called search_location
	PROCEDURE search_location(self){
		// creates a template for our api request the {} indicate where the ICAO code will be
		search_template = "https =//avwx.rest/api/metar/{}?options=summary&format=json&onfail=cache"
		// adds the ICAO code from the input box to the search template to make a usable url where we can get our request
		search_url = search_template.FORMAT(self.search_input.text)
		// this uses the kivy built in UrlRequest class to make a request and store the result in the variable.
		// it requests the data by asking for the url to request from then what method to go to once the request has come back (it sends 2 arguments)
		request = URLREQUEST(search_url, self.found_location)
	}
	ENDPROCEDURE
	
	PROCEDURE found_location(self, request, data){
		// sets variable data to a python decoded then json formatted version of the request data if the request data is not a python dictionary.
		data = json.LOADS(data.decode()) IF NOT ISINSTANCE(data, dict) else data
		// creates an empty list where everything to be added to the list will be stored.
		toAdd = []
		// this a list with each part of the raw METAR
		raw = data['raw'].SPLIT()
		// this is a list with each part of the summary of the METAR (the summary is provided by the API.
		summary = data['summary'].SPLIT(',')
		// adds the list contents of summary to toAdd
		FOR i IN summary =
            toAdd.APPENND(i)
		ENDFOR
		// changes the list from the kivy code so it equals our list. This changes what is displayed.
        self.search_results.item_strings = toAdd
	}
	ENDPROCEDURE
	
	PROCEDURE fill(self):
		// get ready for this one it's a long boi
		// it gets the dictionary format of the user deatils which is then split and formated multiple times to get the recent searches we need.
		rs = ((((((self.usr_details).SPLIT(':'))[4].SPLIT(']'))[0].REPLACE(' ', '')).REPLACE("'", "")).REPLACE('[', '').SPLIT(','))
		// fills in the recent searches
		self.recent_search_one.text, self.recent_search_two.text, self.recent_search_three.text = rs[0], rs[1], rs[2]
}
ENDCLASS

Kivy

// creates a class
CLASS AddLocationForm {
	
	// sets the name so the screen manager can identify this screen
	name = "AddLocationForm"
	
	// sets object properties for certain widgets given their id so they can be manipulated in the python code.
	search_input = search_box
	search_results = search_results_list
    recent_search_one = rsone
    recent_search_two = rstwo
    recent_search_three = rsthree
	
	// sets stacking of widgets to be vertical
	orientation = "vertical"
	
	// Creates a box layout which is 40dp in height (size_hint_y has to be set to None for this to occur)
		height = "40dp"
		size_hint_y = None
		Label {
			text = "Enter ICAO Code"
		}
	}
	Creates a box layout which is 40dp in height. The orientation is not defaulted to horizontal.
	BoxLayout {
		height = "40dp"
		size_hint_y = None
		// An input box which is 40% of the width of the screen, has shaddow text and has no default text.
		TextInput {
			id = search_box
			size_hint_x = 40
			hint_text = "ICAO"
			text = ""
		}
		// creates a button which is 10% of the screen's width, has text on the button
		// when pressed it runs runs the backend procedure search_location().
		Button {
			text = "Search"
			size_hint_x = 15
			on_press {
				root.search_location()
			}
		}
		// A button which thakes up 20% of the screen's width
		Button {
			text = "Recent Searches"
			size_hint_x = 20
			// if the user clicks on the parent widget then the dropdown (defined below) closes
			on_parent {
				dropdown.dismiss()
			}
			on_release {
			// if the user clicks the button then the dropdown opens.
				dropdown.open(self)
			}
		}
		// This is the dropdown menu mentioned before (it is a widget in itself)
		It has a id and initially handles the button text.
		Dropdown {
			id = dropdown
			on_select { 
				btn.text = '{}'.format(args[1])
			}
			// There are 3 child button which have id's so the recent searhes can be set to them.
			// They have text and when clicked, they will change the text in the search box to that of the button
			Button {
                id = rsone
                text = 'First Item'
                size_hint_y = None
                height = 35
                on_release { 
					search_box.text = self.text
				}
			}
			
            Button {
                id = rstwo
                text = 'Second Item'
                size_hint_y = None
                height = 35
                on_release { 
					search_box.text = self.text
				}
			}
			
            Button {
                id = rsthree
                text = 'Third Item'
                size_hint_y = None
                height = 35
                on_release { 
					search_box.text = self.text
				}
			}
		}
		// This button takes up 20% of the screen's width and takes the user to 1.4 when clicked.
        Button {
            text = "Forgot your ICAO?"
            size_hint_x = 25
            on_release {
                app.root.current = "ICAO"
                root.manager.transition.direction = "left"
			}
		}
	}
	// This is the list where all the search reults will be put. It has an id for this reason. 
    ListView {
        id = search_results_list
        item_strings = []
	}
		
}
