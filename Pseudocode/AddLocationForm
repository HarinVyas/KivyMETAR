AddLocationForm class

Python

CLASS AddLocationForm {

	// gets the respective object properties from the kv code and sets them as variables
	search_input = ObjectProperty()
    search_results = ObjectProperty()
    recent_search_one = ObjectProperty()
    recent_search_two = ObjectProperty()
    recent_search_three = ObjectProperty()
	
	// creates a procedure called search_location
	PROCEDURE search_location(self){
		// creates a template for our api request the {} indicate where the ICAO code will be
		search_template = "https =//avwx.rest/api/metar/{}?options=summary&format=json&onfail=cache"
		// adds the ICAO code from the input box to the search template to make a usable url where we can get our request
		search_url = search_template.FORMAT(self.search_input.text)
		// this uses the kivy built in UrlRequest class to make a request and store the result in the variable.
		// it requests the data by asking for the url to request from then what method to go to once the request has come back (it sends 2 arguments)
		request = URLREQUEST(search_url, self.found_location)
	}
	ENDPROCEDURE
	
	PROCEDURE found_location(self, request, data){
		// sets variable data to a python decoded then json formatted version of the request data if the request data is not a python dictionary.
		data = json.LOADS(data.decode()) IF NOT ISINSTANCE(data, dict) else data
		// creates an empty list where everything to be added to the list will be stored.
		toAdd = []
		// this a list with each part of the raw METAR
		raw = data['raw'].SPLIT()
		// this is a list with each part of the summary of the METAR (the summary is provided by the API.
		summary = data['summary'].SPLIT(',')
		// adds the list contents of summary to toAdd
		FOR i IN summary =
            toAdd.APPENND(i)
		ENDFOR
		// changes the list from the kivy code so it equals our list. This changes what is displayed.
        self.search_results.item_strings = toAdd
	}
	ENDPROCEDURE
	
	PROCEDURE change_val(self, val){
		// a procedure which changes the search input to a given string.
		self.search_input.text = val
	}
	ENDPROCEDURE
	
}
ENDCLASS

Kivy

CLASS AddLocationForm {

	name = "AddLocationForm"
	
	search_input = search_box
	search_results = search_results_list
    recent_search_one = rsone
    recent_search_two = rstwo
    recent_search_three = rsthree
	orientation = "vertical"
	
	BoxLayout {
		height = "40dp"
		size_hint_y = None
		Label {
			text = "Enter ICAO Code"
		}
	}
	BoxLayout {
		height = "40dp"
		size_hint_y = None
		TextInput {
			id = search_box
			size_hint_x = 40
			hint_text = "ICAO"
			text = ""
		}
		Button {
			text = "Search"
			size_hint_x = 10
			on_press {
				root.search_location()
			}
		}
		Button {
			text = "Recent Searches"
			size_hint_x = 20
			on_parent {
				dropdown.dismiss()
			}
			on_release {
				dropdown.open(self)
			}
		}
		Dropdown {
			id = dropdown
			on_select { 
				btn.text = '{}'.format(args[1])
			}
			
			Button {
                id = rsone
                text = 'First Item'
                size_hint_y = None
                height = 35
                on_release { 
					search_box.text = self.text
				}
			}
			
            Button {
                id = rstwo
                text = 'Second Item'
                size_hint_y = None
                height = 35
                on_release { 
					search_box.text = self.text
				}
			}
			
            Button {
                id = rsthree
                text = 'Third Item'
                size_hint_y = None
                height = 35
                on_release { 
					search_box.text = self.text
				}
			}
		}
		Button {
            size_hint_x = 10
            text = "Clear"
            on_release {
				search_results_list.item_strings = []
			}
		}
        Button {
            text = "Forgot your ICAO?"
            size_hint_x = 20
            on_release {
                app.root.current = "ICAO"
                root.manager.transition.direction = "left"
			}
		}
	}
    ListView {
        id = search_results_list
        item_strings = []
	}
		
}
