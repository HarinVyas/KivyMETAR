RegisterPage Class

Python

//defines a class which inherits BoxLayout and Screen
CLASS RegisterPage(BoxLayout, Screen) {
	
	// gets the respective object properties from the kv code and sets them as variables
	username_input = ObjectProperty()
	password_input = ObjectProperty()
	email_input = ObjectProperty()
	validation = ObjectProperty()
	
	//defines a method which takes self 
	PROCEDURE register_validation(self){
		// opens data.json to read and sets it to variable f
		f = OPENREAD(“data.json”)
		// uses json.load to decode the data into a python dictionary called data
		data = json.LOAD(f)
		// initialises a list which will store the id's of each user
		idLst = []
		// closes the file as all neccesary data has been extrapolated
		f.CLOSE()
		// a for loop which iterates over each user, gets their id and adds it to the list
		FOR users IN data[‘users’] {
			idLst.append(users)
		}
		ENDFOR
		
		// a for loop to validate the user (iterates over each users id)
		FOR id IN idLst{
			// if any of the input fields are empty then it changes the validation text to tell the user that the form isn't complete
			IF (self.username_input.text OR self.password_input.text OR self.email_input.text) == "" {
				self.validation.text = "Form not completed"
			}
			// if the username or email is already in use (in the list of users) then it will tell the user so by changing the validation text
			ELSEIF (self.username_input.text == data['users'][id]['username']) OR (self.email_input.text == data['users'][id]['email']) {
				self.validation.text = "Username or Email is taken"
			}
			// else it will send the user to the register method, giving it the list of user ids and the whole decoded json dictionary
			ELSE {
				self.REGISTER(idLst, data)
			}
			ENDIF
		}
		ENDFOR
	}
	ENDPROCEDURE
	
	// defines a method which takes self, the list of users ids and the whole decoded json dictionary
	PROCEDURE register(self, idLst, data){
		// as every id is currently a string, this is converted to an integer so we can get the last id number and add 1 as the id's increment
		// We convert this to a string as the formatting in the json file requires the id to be a string
		id = TOSTRING(TOINTEGER(idLst[-1]) + 1)
		// sets the hash salt (used to account for rainbow tables)
		salt = "foo"
		// this hashes the salt and the password (both are joined with the salt first) using md5 encryption
		passHash = hashlib.MD5((salt & self.password_input.text).ENCODE("utf-8)).HEXDIGEST()
		// this adds the new users data to the end of the decoded json dictionary
		data['users'][id] = {"username": self.username_input.text, "password_hash": passHash,
                             "email": self.email_input.text, "recent_searches_METAR": [], "recent_searches_ICAO": []}
        
		// this creates a temporary json file and dumps the modified data there and closes it
		f = OPENWRITE("Data/temp.json")
		json.DUMP(data, f, indent=2)
        f.CLOSE()
		
		// this deletes the old json file, and renames the temporary one to be the same name as the old one (basically replacing them)
		os.REMOVE("Data/data.json")
        os.RENAME("Data/temp.json", "Data/data.json")
		
		// this tells the user that the registration is complete and empties the form incase another user wants to be registered.
        self.validation.text = "Registration Complete"
        self.password_input.text = ""
        self.email_input.text = ""
        self.username_input.text = ""
	}
	ENDPROCEDURE
}
ENDCLASS


Kivy

// child of WeatherRoot so inherits the background color

CLASS RegisterPage {

	// sets the name so the screen manager can identify this screen
	name = "Register"
	// sets object properties for certain widgets given their id so they can be manipulated in the python code.
	username_input = username
	password_input = password
	email_input = email
	validation = confo
	
	// sets a box layout for the widgets on the screen.
	// box layout lays out the widgets on the screen horizontally so all of the screen is filled with equal space given to each widget
	BoxLayout {
		// tells the box layout to lay the widgets vertially instead.
		orientation = "vertical"
		// adds padding to either side (L, T, R, B) in pixels so the boxlayout is centered and doesn't take up the entire screen
		padding = [100, 50, 100, 50]
		// adds a spacing of 30 pixels between each widget
		spacing = 30
		// centers the widgets horizontally
		center_x = True
		
		// creates a label widget which has the text "Username" and who's font size is 25 pixels
		Label {
			text = "Username"
			font_size = 25
		}
		// creates an input widget which has been given an id, has a font size of 25 pixels. The widget is also stretched vertically so it is 175% of the original.
		TextInput {
            id = username
            font_size = 25
            size_hint_y = 1.75
		}
		// creates a label widget which has the text "Password" and who's font size is 25 pixels
        Label {
            text = "Password"
            font_size = 25
		}
		// creates an input widget which has been given an id, has a font size of 25 pixels. The input cannot take multiple lines and has been given password formatting
		// The widget is also stretched vertically so it is 175% of the original.
        TextInput {
            id = password
            password = True
            multiline = False
            font_size = 25
            size_hint_y = 1.75
		}
		// creates a label widget which has the text "Email" and who's font size is 25 pixels
        Label {
            text = "Email"
            font_size = 25
		}
		// creates an input widget which has been given an id, has a font size of 25 pixels. The widget is also stretched vertically so it is 175% of the original.
        TextInput {
            id = email
            font_size = 25
            size_hint_y = 1.75
		}
		// Creates a anchor layout inside the box layout. An anchor layout, lays out its widgets vertially and horizontally to a set place eg left, center or right
        AnchorLayout {
			// creates a button widget which has the text "Go", font size is 25 pixels and is stretched vertically to 60% of the original
			// and horizontally to 150% of the original. It is aligned so it is in the centre (horizontally) of the anchor layout
            Button {
                text = "Go"
                font_size = 25
                size_hint_x = 0.6
                size_hint_y = 1.5
                halign: 'center'
				// once the button is clicked, it runs the register_validation() method in the python code
                on_release {
                    root.register_validation()
				}
			}
		}
		// Creates a anchor layout inside the box layout
        AnchorLayout {
			// creates a button widget which has the text "Already got an account?", font size is 28 pixels and is stretched vertically to 60% of the original
			// and horizontally to 150% of the original. It is aligned so it is in the centre (horizontally) of the anchor layout
            Button {
                text = "Already got an account?"
                size_hint_x = 0.6
                size_hint_y = 1.5
                halign = 'center'
                font_size = 28
				// once the button is released, it calls the screen manager to move to the login screen by setting the current screen to "Login" with a transition to the left
                on_release{
                    app.root.current = "Login"
                    root.manager.transition.direction = "left"
				}
			}
		}
		// creates a label widget with no text, who's font size is 25 pixels and has the id "confo". This will be where the confirmation/error text will be.
        Label {
            id = confo
            text = ""
            font_size = 25
		}
	}
}
ENDCLASS